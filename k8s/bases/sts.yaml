apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stable-diffusion-webui
spec:
  serviceName: stable-diffusion-webui
  replicas: 1
  selector:
    matchLabels:
      app: stable-diffusion-webui
  template:
    metadata:
      labels:
        app: stable-diffusion-webui
    spec:
      initContainers:
        - name: init-fix-permissions
          image: busybox:1
          volumeMounts:
            - name: shared-embeddings
              mountPath: /shared-embeddings
            - name: shared-extensions
              mountPath: /shared-extensions
            - name: shared-models
              mountPath: /shared-models
            - name: shared-outputs
              mountPath: /shared-outputs
            - name: datadir
              mountPath: /datadir
          command: ["/bin/sh"]
          # NOTE: an ext4 volume has a `lost+found` dir on its root path and causes the app crash (due to the permission),
          #       so do chmod 777 here (other solutions: use xfs, avoid using root paths).
          args:
            - -c
            - |
              echo "fix permissions" \
              && find /shared-embeddings -maxdepth 1 -type d -exec chmod -v 777 {} \; \
              && find /shared-extensions -maxdepth 1 -type d -exec chmod -v 777 {} \; \
              && find /shared-models -maxdepth 1 -type d -exec chmod -v 777 {} \; \
              && find /shared-outputs -maxdepth 1 -type d -exec chmod -v 777 {} \; \
              && find /datadir -maxdepth 1 -type d -exec chmod -v 777 {} \;
        - name: init-setup-dirs
          image: sd-webui
          volumeMounts:
            - name: shared-models
              mountPath: /shared-models
            - name: datadir
              mountPath: /datadir
          command: ["/bin/sh"]
          # NOTE: The app will try to create dirs and crash if it's on a read-only file system, so pre-create them here.
          args:
            - "-c"
            - |
              echo "create dirs if not exist" \
              && mkdir -v -m 777 -p \
                /datadir/.cache \
                /shared-models/Codeformer \
                /shared-models/deepbooru \
                /shared-models/ESRGAN \
                /shared-models/GFPGAN \
                /shared-models/hypernetworks \
                /shared-models/LDSR \
                /shared-models/Lora \
                /shared-models/RealESRGAN \
                /shared-models/Stable-diffusion \
                /shared-models/SwinIR \
                /shared-models/VAE \
                /shared-models/VAE-approx \
              && echo "create empty json files if not exist" \
              && CFG=/datadir/config.json \
              && if [ ! -f "$CFG" ] ; then echo "{}" > "$CFG" ; fi \
              && CFG=/datadir/ui-config.json \
              && if [ ! -f "$CFG" ] ; then echo "{}" > "$CFG" ; fi \
              && CFG=/datadir/cache.json \
              && if [ ! -f "$CFG" ] ; then echo "{}" > "$CFG" ; fi
        - name: init-setup-default-vae
          image: sd-webui
          volumeMounts:
            - name: shared-models
              mountPath: /shared-models
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              echo "copy default VAE" \
              && DST=/shared-models/VAE-approx/model.pt \
              && if [ ! -f "$DST" ] ; then cp -v models/VAE-approx/model.pt "$DST" ; fi
        - name: init-config-set-dirs
          image: sd-webui
          volumeMounts:
            - name: datadir
              mountPath: /datadir
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              echo "set output dirs to the config file" \
              && CFG=/datadir/config.json \
              && OUT_T2I=/datadir/outputs/$HOSTNAME/outputs/txt2img-images \
              && OUT_I2I=/datadir/outputs/$HOSTNAME/outputs/img2img-images \
              && OUT_EX=/datadir/outputs/$HOSTNAME/outputs/extras-images \
              && OUT_T2I_G=/datadir/outputs/$HOSTNAME/outputs/txt2img-grids \
              && OUT_I2I_G=/datadir/outputs/$HOSTNAME/outputs/img2img-grids \
              && OUT_SAVE=/datadir/outputs/$HOSTNAME/log/images \
              && ./venv/bin/python -c \
                  "from modules import shared; shared.opts.load('$CFG'); shared.opts.set('outdir_txt2img_samples', '$OUT_T2I'); shared.opts.set('outdir_img2img_samples', '$OUT_I2I'); shared.opts.set('outdir_extras_samples', '$OUT_EX'); shared.opts.set('outdir_txt2img_grids', '$OUT_T2I_G'); shared.opts.set('outdir_img2img_grids', '$OUT_I2I_G'); shared.opts.set('outdir_save', '$OUT_SAVE'); shared.opts.save('$CFG')"
        - name: init-config-mods
          image: sd-webui
          volumeMounts:
            - name: datadir
              mountPath: /datadir
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              echo "modify the config file" \
              && CFG=/datadir/config.json \
              && ./venv/bin/python -c \
                  "from modules import shared; shared.opts.load('$CFG'); shared.opts.set('save_txt', True); shared.opts.save('$CFG')"
      containers:
        - name: stable-diffusion-webui
          image: sd-webui
          ports:
            - name: http
              containerPort: 7860
          volumeMounts:
            - name: datadir
              mountPath: /datadir
            - name: shared-embeddings
              mountPath: /datadir/embeddings
              readOnly: true
            - name: shared-extensions
              mountPath: /datadir/extensions
              readOnly: true
            - name: shared-models
              mountPath: /datadir/models
              readOnly: true
            - name: shared-outputs
              mountPath: /datadir/outputs
          env:
            - name: TRANSFORMERS_CACHE
              value: "/datadir/.cache"
          args:
            - --api
            - --xformers # assumes GPU mode
            - --disable-nan-check # this is required to use some models
            - --no-download-sd-model # models are downloaded by batches
            - --data-dir=/datadir
          livenessProbe:
            httpGet:
              path: /sdapi/v1/progress?skip_current_image=true
              port: 7860
            initialDelaySeconds: 300
            periodSeconds: 10
          resources:
            requests:
              cpu: 1000m
              memory: 10Gi
              nvidia.com/gpu: "1"
            limits:
              cpu: 2000m
              memory: 20Gi
              nvidia.com/gpu: "1"
      volumes:
        - name: shared-embeddings
          persistentVolumeClaim:
            claimName: shared-embeddings
        - name: shared-extensions
          persistentVolumeClaim:
            claimName: shared-extensions
        - name: shared-models
          persistentVolumeClaim:
            claimName: shared-models
        - name: shared-outputs
          persistentVolumeClaim:
            claimName: shared-outputs
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Mi
